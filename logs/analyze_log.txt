$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people volunteer to help people $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [to - to, help - help, want - want, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people wish to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wish
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people wish to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wish
using map: because people wish to help
grade: 0
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + wish
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> wish
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wish
equalSentences1 :::: One path check, NOT equal: people wish
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 100
equalSentences1 :::: grade: 100
finished grading: because people wish to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because people wish to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people like to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: like
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people like to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + like
equalNodes :::: trick loop var: like +to tricked>>: to
equalNodes :::: trick loop var: like +to tricked>>: help
equalNodes :::: trick try var: like +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + like
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> like
equalNodes :::: trick loop var: like +to tricked>>: to
equalNodes :::: trick loop var: like +to tricked>>: help
equalNodes :::: trick try var: like +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + like
equalSentences1 :::: One path check, NOT equal: people like
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + like
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + like
equalNodes :::: not equal tokens: want + like
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people like to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people like to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + like
equalNodes :::: trick loop var: like +to tricked>>: to
equalNodes :::: trick loop var: like +to tricked>>: help
equalNodes :::: trick try var: like +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + like
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> like
equalNodes :::: trick loop var: like +to tricked>>: to
equalNodes :::: trick loop var: like +to tricked>>: help
equalNodes :::: trick try var: like +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + like
equalSentences1 :::: One path check, NOT equal: people like
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + like
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + like
equalNodes :::: not equal tokens: help + like
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + like
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people like to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people like to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to halp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: halp
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to halp, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + halp
checkTokens :::: spelling fixed: halp >> half
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to half $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: half
ANALYZER :::: Teacher parts: ADV
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to half, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
equalNodes :::: trick loop var: to +to tricked>>: half
equalNodes :::: trick try var: to +to tricked>>: half
equalNodes :::: not equal tokens: to + half
equalNodes :::: not equal tokens: to + to
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> half
equalNodes :::: not equal tokens: to + half
equalSentences1 :::: One path check, NOT equal: to half
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + to
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to half
grade: 0
----finished new check-----
using map: because people want to halp
grade: 0
checkTokens :::: spelling fixed: halp >> hall
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to hall $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: hall
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to hall, Wrriten by: COMPUTER, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: we have insignificant word: to
equalSentences :::: checking to >> COMPARE TO >> hall
equalNodes :::: not equal tokens: to + hall
equalSentences1 :::: One path check, NOT equal: to hall
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> hall
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> hall
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> hall
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + hall
equalSentences1 :::: One path check, NOT equal: to hall
equalSentences :::: checking help >> COMPARE TO >> hall
equalNodes :::: not equal tokens: help + hall
equalSentences1 :::: One path check, NOT equal: help hall
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: hall
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to hall
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> halt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to halt $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: halt
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to halt, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + halt
checkTokens :::: synonym fixed: halt >> hold
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to hold $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: hold
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to hold, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hold
using map: because people want to hold
grade: 0
checkTokens :::: synonym fixed: hold >> keep
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to keep $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: keep
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to keep, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + keep
using map: because people want to keep
grade: 0
equalNodes :::: not equal tokens: help + keep
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> keep
equalNodes :::: not equal tokens: to + keep
equalSentences1 :::: One path check, NOT equal: to keep
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + keep
using map: because people want to keep
grade: 0
equalNodes :::: not equal tokens: help + keep
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to keep
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + hold
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> hold
equalNodes :::: not equal tokens: to + hold
equalSentences1 :::: One path check, NOT equal: to hold
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hold
using map: because people want to hold
grade: 0
using map: because people want to hold
grade: 0
equalNodes :::: not equal tokens: help + hold
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to hold
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + halt
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> halt
checkTokens :::: synonym fixed: halt >> stop
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to stop $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: stop
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to stop, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + stop
using map: because people want to stop
grade: 0
equalNodes :::: not equal tokens: help + stop
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> stop
equalNodes :::: not equal tokens: to + stop
equalSentences1 :::: One path check, NOT equal: to stop
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + stop
using map: because people want to stop
grade: 0
equalNodes :::: not equal tokens: help + stop
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to stop
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: to + halt
equalSentences1 :::: One path check, NOT equal: to halt
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + halt
using map: because people want to halt
grade: 0
equalNodes :::: not equal tokens: help + halt
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to halt
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> harp
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to harp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: harp
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to harp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + harp
equalNodes :::: not equal tokens: help + harp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> harp
equalNodes :::: not equal tokens: to + harp
equalSentences1 :::: One path check, NOT equal: to harp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + harp
equalNodes :::: not equal tokens: help + harp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to harp
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> halo
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to halo $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: halo
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to halo, Wrriten by: COMPUTER, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: we have insignificant word: to
equalSentences :::: checking to >> COMPARE TO >> halo
equalNodes :::: not equal tokens: to + halo
equalSentences1 :::: One path check, NOT equal: to halo
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> halo
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> halo
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> halo
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + halo
equalSentences1 :::: One path check, NOT equal: to halo
equalSentences :::: checking help >> COMPARE TO >> halo
equalNodes :::: not equal tokens: help + halo
equalSentences1 :::: One path check, NOT equal: help halo
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: halo
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to halo
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> alp
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to alp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: alp
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to alp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: we have insignificant word: to
equalSentences :::: checking to >> COMPARE TO >> alp
equalNodes :::: not equal tokens: to + alp
equalSentences1 :::: One path check, NOT equal: to alp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> alp
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> alp
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> alp
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + alp
equalSentences1 :::: One path check, NOT equal: to alp
equalSentences :::: checking help >> COMPARE TO >> alp
equalNodes :::: not equal tokens: help + alp
equalSentences1 :::: One path check, NOT equal: help alp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: alp
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to alp
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> hale
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to hale $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: hale
ANALYZER :::: Teacher parts: ADJ
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to hale, Wrriten by: COMPUTER, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: we have insignificant word: to
equalSentences :::: checking to >> COMPARE TO >> hale
equalNodes :::: not equal tokens: to + hale
equalSentences1 :::: One path check, NOT equal: to hale
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> hale
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> hale
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> hale
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + hale
equalSentences1 :::: One path check, NOT equal: to hale
equalSentences :::: checking help >> COMPARE TO >> hale
equalNodes :::: not equal tokens: help + hale
equalSentences1 :::: One path check, NOT equal: help hale
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: hale
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to hale
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> hap
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to hap $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: hap
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to hap, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hap
equalNodes :::: not equal tokens: help + hap
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> hap
equalNodes :::: not equal tokens: to + hap
equalSentences1 :::: One path check, NOT equal: to hap
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hap
equalNodes :::: not equal tokens: help + hap
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to hap
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> hasp
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to hasp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: hasp
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to hasp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hasp
equalNodes :::: not equal tokens: help + hasp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> hasp
equalNodes :::: not equal tokens: to + hasp
equalSentences1 :::: One path check, NOT equal: to hasp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + hasp
equalNodes :::: not equal tokens: help + hasp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to hasp
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> palp
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to palp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: palp
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to palp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + palp
equalNodes :::: not equal tokens: help + palp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> palp
equalNodes :::: not equal tokens: to + palp
equalSentences1 :::: One path check, NOT equal: to palp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + palp
equalNodes :::: not equal tokens: help + palp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to palp
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: halp >> h alp
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to h alp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: h
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: alp
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to h alp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: we have insignificant word: to
equalSentences :::: checking to >> COMPARE TO >> h
equalNodes :::: trick loop var: h +to tricked>>: alp
equalNodes :::: not equal tokens: to + h
equalSentences1 :::: One path check, NOT equal: to h
equalSentences :::: checking to >> COMPARE TO >> alp
equalNodes :::: not equal tokens: to + alp
equalSentences1 :::: One path check, NOT equal: to alp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> h
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> h
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> h
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + h
equalSentences1 :::: One path check, NOT equal: to h
equalSentences :::: checking help >> COMPARE TO >> h
equalNodes :::: not equal tokens: help + h
equalSentences1 :::: One path check, NOT equal: help h
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: h
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people want to h alp
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + halp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> halp
equalNodes :::: not equal tokens: to + halp
equalSentences1 :::: One path check, NOT equal: to halp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 100
equalSentences1 :::: grade: 100
finished grading: because people want to halp
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because people want to halp, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people wants to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wants
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people wants to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wants
compare :::: passed checkTokens V want + wants
compare :::: passed checkParts V want + wants
compare :::: passed checkRelationToParent V want + wants
equalNodes :::: equal tokens: want + wants
[wants - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> wants
compare :::: passed checkTokens V want + wants
compare :::: passed checkParts V want + wants
compare :::: passed checkRelationToParent V want + wants
equalNodes :::: equal tokens: want + wants
[wants - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want wants
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> wants
equalSentences1 :::: One path check, Set contains already: wants
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, wants - want, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, wants - want, help - help, people - people]
equalNodes :::: there are fathers: want + wants
compare :::: passed checkTokens V want + wants
compare :::: passed checkParts V want + wants
compare :::: passed checkRelationToParent V want + wants
equalNodes :::: equal tokens: want + wants
[to - to, wants - want, help - help, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> wants
equalSentences1 :::: One path check, Set contains already: wants
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, wants - want, help - help, people - people]
equalNodes :::: there are fathers: want + wants
compare :::: passed checkTokens V want + wants
compare :::: passed checkParts V want + wants
compare :::: passed checkRelationToParent V want + wants
equalNodes :::: equal tokens: want + wants
[to - to, wants - want, help - help, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people wants to help
equalSentences1 :::: equalset = : [to - to, wants - want, help - help, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people wants to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because people wants to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: people want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they want to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, they - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, want - want, help - help, they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, want - want, help - help, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, want - want, help - help, they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, want - want, help - help, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help they want to help
equalSentences1 :::: equalset = : [to - to, want - want, help - help, they - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: they want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: they want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, help - help, to - to, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, help - help, to - to, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, help - help, to - to, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, help - help, to - to, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because the people want to help
equalSentences1 :::: equalset = : [want - want, help - help, to - to, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because the people want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because the people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ thats because people want to help people $$ google api
ANALYZER :::: Teacher parts: thats
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: thats because people want to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> thats
equalNodes :::: trick loop var: thats +to tricked>>: because
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: trick loop var: thats +to tricked>>: want
equalNodes :::: trick try var: thats +to tricked>>: want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: want +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: trick loop var: thats +to tricked>>: to
equalNodes :::: trick loop var: thats +to tricked>>: help
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: not equal tokens: people + thats
equalSentences1 :::: One path check, NOT equal: people thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> thats
equalNodes :::: trick loop var: thats +to tricked>>: because
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: trick loop var: thats +to tricked>>: want
equalNodes :::: trick try var: thats +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want thats
equalSentences :::: checking to >> COMPARE TO >> thats
equalSentences1 :::: One path check, Set contains already: thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalNodes :::: not equal tokens: to + help
equalNodes :::: trick loop var: want +to tricked>>: people
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> thats
equalSentences1 :::: One path check, Set contains already: thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help want
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help thats because people want to help people
equalSentences1 :::: equalset = : [to - to, help - help, want - want, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: thats because people want to help people
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: thats because people want to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ want to help $$ google api
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to, want - want]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, to - to, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to, want - want]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, to - to, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: want to help because people want to help
equalSentences1 :::: equalset = : [help - help, to - to, want - want]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 3
finished grading: want to help
grade: 75
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking volunteer >> COMPARE TO >> want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: volunteer want
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking help >> COMPARE TO >> want
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalSentences1 :::: One path check, NOT equal: help want
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: want
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: want to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 75
$$$$$$$$$$$$$$$$$$$$$$$$$$$ to help $$ google api
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalNodes :::: not equal tokens: want + to
equalSentences1 :::: One path check, NOT equal: want to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want help
equalSentences1 :::: finished path check WITH FOUND=TRUE: to help because people want to help
equalSentences1 :::: equalset = : [help - help, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 2
finished grading: to help
grade: 50
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking volunteer >> COMPARE TO >> to
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalNodes :::: not equal tokens: help + to
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + to
equalSentences1 :::: One path check, NOT equal: volunteer to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking volunteer >> COMPARE TO >> help
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer help
equalSentences1 :::: finished path check WITH FOUND=TRUE: to help people volunteer to help people
equalSentences1 :::: equalset = : [to - to, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 5
equalSentences1 :::: equalSet.size(): 2
finished grading: to help
grade: 40
### SYNTAX ANALYZER RESULT:
### student: Answer: to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
### grade: 50
$$$$$$$$$$$$$$$$$$$$$$$$$$$ to help people $$ google api
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalNodes :::: not equal tokens: want + to
equalSentences1 :::: One path check, NOT equal: want to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want help
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: to help people
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking volunteer >> COMPARE TO >> to
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalNodes :::: not equal tokens: help + to
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + to
equalSentences1 :::: One path check, NOT equal: volunteer to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking volunteer >> COMPARE TO >> help
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[to - to, help - help, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help people
equalSentences1 :::: finished path check WITH FOUND=TRUE: to help people people volunteer to help people
equalSentences1 :::: equalset = : [to - to, help - help, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 5
equalSentences1 :::: equalSet.size(): 3
finished grading: to help people
grade: 60
### SYNTAX ANALYZER RESULT:
### student: Answer: to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 60
$$$$$$$$$$$$$$$$$$$$$$$$$$$ People choose to volunteer because they want to help. $$ google api
ANALYZER :::: Teacher parts: People
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: choose
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: People choose to volunteer because they want to help., Wrriten by: STUDENT, Grade: -2, Significant Words: 8, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
compare :::: passed checkRelationToParent V people + People
equalNodes :::: equal tokens: people + People
[People - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: because
equalNodes :::: trick loop var: choose +to tricked>>: they
equalNodes :::: trick loop var: choose +to tricked>>: want
equalNodes :::: trick try var: choose +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people People
equalSentences :::: checking want >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking want >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: because
equalNodes :::: trick loop var: choose +to tricked>>: they
equalNodes :::: trick loop var: choose +to tricked>>: want
equalNodes :::: trick try var: choose +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want choose
equalSentences :::: checking to >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, People - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: they +to tricked>>: want
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: .
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: to + help
equalNodes :::: trick loop var: want +to tricked>>: .
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, to - to, want - want, People - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, to - to, help - help, want - want, People - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, to - to, help - help, want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking help >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: trick loop var: to +to tricked>>: because
equalNodes :::: trick loop var: to +to tricked>>: they
equalNodes :::: trick loop var: to +to tricked>>: want
equalNodes :::: trick loop var: to +to tricked>>: to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: .
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences :::: checking help >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: help volunteer
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: they +to tricked>>: want
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: .
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking help >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, to - to, help - help, want - want, People - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, to - to, help - help, want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help want
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help People choose to volunteer because they want to help.
equalSentences1 :::: equalset = : [to - to, to - to, help - help, want - want, People - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 5
finished grading: People choose to volunteer because they want to help.
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: People choose to volunteer because they want to help., Wrriten by: STUDENT, Grade: -2, Significant Words: 8, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they choose to volunteer to help people. $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: choose
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: help
equalNodes :::: trick loop var: choose +to tricked>>: people
equalNodes :::: trick loop var: choose +to tricked>>: .
equalNodes :::: trick try var: choose +to tricked>>: .
equalNodes :::: not intresting: want + .
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: help
equalNodes :::: trick loop var: choose +to tricked>>: people
equalNodes :::: trick loop var: choose +to tricked>>: .
equalNodes :::: trick try var: choose +to tricked>>: .
equalNodes :::: not intresting: want + .
equalSentences1 :::: finished path check, equal: want choose
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[they - people, to - to]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, to - to]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: to + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[help - help, they - people, to - to, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, to - to, to - to]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: to + help
equalSentences1 :::: One path check, NOT equal: to help
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: we have insignificant word: .
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + choose
equalNodes :::: not equal tokens: want + choose
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they choose to volunteer to help people.
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking volunteer >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer choose
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[volunteer - volunteer, to - to, they - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[volunteer - volunteer, help - help, to - to, they - people]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, help - help, to - to, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[volunteer - volunteer, help - help, to - to, they - people]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, help - help, to - to, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help volunteer
equalSentences :::: checking people >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking people >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: trick loop var: to +to tricked>>: .
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[volunteer - volunteer, help - help, to - to, people - people, they - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[volunteer - volunteer, help - help, to - to, people - people, they - people]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, help - help, to - to, people - people, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people help
equalSentences1 :::: finished path check WITH FOUND=TRUE: people volunteer to help people they choose to volunteer to help people.
equalSentences1 :::: equalset = : [volunteer - volunteer, help - help, to - to, people - people, they - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 5
equalSentences1 :::: equalSet.size(): 5
finished grading: they choose to volunteer to help people.
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: they choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people volunteer to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people volunteer to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + volunteer
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people volunteer to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people volunteer to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking volunteer >> COMPARE TO >> volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer volunteer
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, to - to, volunteer - volunteer]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences :::: checking people >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking volunteer >> COMPARE TO >> volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer volunteer
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking volunteer >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, to - to, volunteer - volunteer]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking volunteer >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: people volunteer to help people volunteer to help people
equalSentences1 :::: equalset = : [people - people, to - to, volunteer - volunteer, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 5
equalSentences1 :::: equalSet.size(): 4
finished grading: people volunteer to help
grade: 80
### SYNTAX ANALYZER RESULT:
### student: Answer: people volunteer to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 80
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people choose to volunteer to help people. $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: choose
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: help
equalNodes :::: trick loop var: choose +to tricked>>: people
equalNodes :::: trick loop var: choose +to tricked>>: .
equalNodes :::: trick try var: choose +to tricked>>: .
equalNodes :::: not intresting: want + .
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: help
equalNodes :::: trick loop var: choose +to tricked>>: people
equalNodes :::: trick loop var: choose +to tricked>>: .
equalNodes :::: trick try var: choose +to tricked>>: .
equalNodes :::: not intresting: want + .
equalSentences1 :::: finished path check, equal: want choose
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, people - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, people - people, help - help]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: to + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, to - to, people - people, help - help]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, to - to, people - people, help - help]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: want + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalNodes :::: trick loop var: help +to tricked>>: .
equalNodes :::: not equal tokens: to + help
equalSentences1 :::: One path check, NOT equal: to help
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: .
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: we have insignificant word: .
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + choose
equalNodes :::: not equal tokens: want + choose
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people choose to volunteer to help people.
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking volunteer >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, volunteer - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer choose
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, to - to, volunteer - volunteer]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help volunteer
equalSentences :::: checking people >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking people >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: trick loop var: to +to tricked>>: .
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people, people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: there are fathers: volunteer + volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[people - people, people - people, to - to, volunteer - volunteer, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people help
equalSentences1 :::: finished path check WITH FOUND=TRUE: people volunteer to help people people choose to volunteer to help people.
equalSentences1 :::: equalset = : [people - people, people - people, to - to, volunteer - volunteer, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 5
equalSentences1 :::: equalSet.size(): 5
finished grading: people choose to volunteer to help people.
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: people choose to volunteer to help people., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people hate to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hate
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hate to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hate
equalSentences1 :::: One path check, NOT equal: people hate
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hate
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hate
equalNodes :::: not equal tokens: want + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hate to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hate to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hate
equalSentences1 :::: One path check, NOT equal: people hate
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + hate
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + hate
equalNodes :::: not equal tokens: help + hate
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hate to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people hate to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they love to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: love
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they love to volunteer, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + love
checkTokens :::: synonym fixed: love >> bang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they bang to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: bang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they bang to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + bang
equalNodes :::: trick loop var: bang +to tricked>>: to
equalNodes :::: trick loop var: bang +to tricked>>: volunteer
equalNodes :::: trick try var: bang +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + bang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> bang
equalNodes :::: trick loop var: bang +to tricked>>: to
equalNodes :::: trick loop var: bang +to tricked>>: volunteer
equalNodes :::: trick try var: bang +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + bang
equalSentences1 :::: One path check, NOT equal: people bang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + bang
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
checkTokens :::: synonym fixed: bang >> belt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they belt to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: belt
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they belt to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + belt
using map: they belt to volunteer
grade: 0
checkTokens :::: synonym fixed: belt >> whang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they whang to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: whang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they whang to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + whang
checkTokens :::: spelling fixed: whang >> Wang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they Wang to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: Wang
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they Wang to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> Wang
equalNodes :::: trick loop var: Wang +to tricked>>: to
equalNodes :::: trick loop var: Wang +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + Wang
equalSentences1 :::: One path check, NOT equal: people Wang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + volunteer
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + volunteer
equalNodes :::: not equal tokens: want + volunteer
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they Wang to volunteer
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: whang >> hang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they hang to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: hang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they hang to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + hang
checkTokens :::: synonym fixed: hang >> bent
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they bent to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: bent
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they bent to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + bent
using map: they bent to volunteer
grade: 0
equalNodes :::: trick loop var: bent +to tricked>>: to
equalNodes :::: trick loop var: bent +to tricked>>: volunteer
equalNodes :::: trick try var: bent +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + bent
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> bent
equalNodes :::: trick loop var: bent +to tricked>>: to
equalNodes :::: trick loop var: bent +to tricked>>: volunteer
equalNodes :::: trick try var: bent +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + bent
equalSentences1 :::: One path check, NOT equal: people bent
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + bent
using map: they bent to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + bent
equalNodes :::: not equal tokens: want + bent
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they bent to volunteer
grade: 0
----finished new check-----
equalNodes :::: trick loop var: hang +to tricked>>: to
equalNodes :::: trick loop var: hang +to tricked>>: volunteer
equalNodes :::: trick try var: hang +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + hang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> hang
equalNodes :::: trick loop var: hang +to tricked>>: to
equalNodes :::: trick loop var: hang +to tricked>>: volunteer
equalNodes :::: trick try var: hang +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + hang
equalSentences1 :::: One path check, NOT equal: people hang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + hang
using map: they hang to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hang
equalNodes :::: not equal tokens: want + hang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they hang to volunteer
grade: 0
----finished new check-----
equalNodes :::: trick loop var: whang +to tricked>>: to
equalNodes :::: trick loop var: whang +to tricked>>: volunteer
equalNodes :::: trick try var: whang +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + whang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> whang
equalNodes :::: trick loop var: whang +to tricked>>: to
equalNodes :::: trick loop var: whang +to tricked>>: volunteer
equalNodes :::: trick try var: whang +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + whang
equalSentences1 :::: One path check, NOT equal: people whang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + whang
using map: they whang to volunteer
grade: 0
using map: they whang to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: they whang to volunteer
grade: 0
equalNodes :::: not equal tokens: help + whang
equalNodes :::: not equal tokens: want + whang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they whang to volunteer
grade: 0
----finished new check-----
equalNodes :::: trick loop var: belt +to tricked>>: to
equalNodes :::: trick loop var: belt +to tricked>>: volunteer
equalNodes :::: trick try var: belt +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + belt
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> belt
equalNodes :::: trick loop var: belt +to tricked>>: to
equalNodes :::: trick loop var: belt +to tricked>>: volunteer
equalNodes :::: trick try var: belt +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + belt
equalSentences1 :::: One path check, NOT equal: people belt
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + belt
using map: they belt to volunteer
grade: 0
using map: they belt to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + belt
equalNodes :::: not equal tokens: want + belt
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they belt to volunteer
grade: 0
----finished new check-----
checkTokens :::: synonym fixed: bang >> hump
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they hump to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: hump
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they hump to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + hump
using map: they hump to volunteer
grade: 0
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: volunteer
equalNodes :::: trick try var: hump +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + hump
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> hump
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: volunteer
equalNodes :::: trick try var: hump +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + hump
equalSentences1 :::: One path check, NOT equal: people hump
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + hump
using map: they hump to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hump
equalNodes :::: not equal tokens: want + hump
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they hump to volunteer
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + bang
equalNodes :::: not equal tokens: want + bang
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they bang to volunteer
grade: 0
----finished new check-----
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: volunteer
equalNodes :::: trick try var: love +to tricked>>: volunteer
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: not equal tokens: want + love
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> love
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: volunteer
equalNodes :::: trick try var: love +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + volunteer
equalNodes :::: not equal tokens: people + love
equalSentences1 :::: One path check, NOT equal: people love
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: volunteer
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: people + volunteer
equalSentences1 :::: One path check, NOT equal: people volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + love
using map: they love to volunteer
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: they love to volunteer
grade: 0
equalNodes :::: not equal tokens: help + love
equalNodes :::: not equal tokens: want + love
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they love to volunteer
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they love to volunteer, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + love
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: volunteer
equalNodes :::: trick try var: love +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking volunteer >> COMPARE TO >> love
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: volunteer
equalNodes :::: trick try var: love +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer love
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> love
equalSentences1 :::: One path check, Set contains already: love
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, volunteer - volunteer, they - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + love
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
checkTokens :::: synonym fixed: love >> hump
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they hump to volunteer $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: hump
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they hump to volunteer, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + hump
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: volunteer
equalNodes :::: trick try var: hump +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking volunteer >> COMPARE TO >> hump
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: volunteer
equalNodes :::: trick try var: hump +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer hump
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> hump
equalSentences1 :::: One path check, Set contains already: hump
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, volunteer - volunteer, they - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + hump
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + hump
equalNodes :::: not equal tokens: help + hump
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + hump
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they hump to volunteer
grade: 0
----finished new check-----
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + love
equalNodes :::: not equal tokens: help + love
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + love
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they love to volunteer
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: they love to volunteer, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people want to fly $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: fly
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want to fly, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to, people - people]
equalNodes :::: there are fathers: help + fly
checkTokens :::: synonym fixed: fly >> fell
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people want to fell $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: fell
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want to fell, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to, people - people]
equalNodes :::: there are fathers: help + fell
equalNodes :::: not equal tokens: help + fell
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> fell
equalNodes :::: not equal tokens: to + fell
equalSentences1 :::: One path check, NOT equal: to fell
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to, people - people]
equalNodes :::: there are fathers: help + fell
equalNodes :::: not equal tokens: help + fell
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people want to fell
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + fly
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> fly
equalNodes :::: not equal tokens: to + fly
equalSentences1 :::: One path check, NOT equal: to fly
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to, people - people]
equalNodes :::: there are fathers: help + fly
using map: because the people want to fly
grade: 0
equalNodes :::: not equal tokens: help + fly
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people want to fly
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want to fly, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: fly
equalNodes :::: trick try var: want +to tricked>>: fly
equalNodes :::: not equal tokens: volunteer + fly
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: fly
equalNodes :::: trick try var: want +to tricked>>: fly
equalNodes :::: not equal tokens: people + fly
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: fly
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> fly
equalNodes :::: not equal tokens: people + fly
equalSentences1 :::: One path check, NOT equal: people fly
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people want to fly
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because the people want to fly, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people want money $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: money
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> money
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> money
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences :::: checking help >> COMPARE TO >> money
equalNodes :::: not equal tokens: help + money
equalSentences1 :::: One path check, NOT equal: help money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: money
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people want money
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: want +to tricked>>: money
equalNodes :::: trick try var: want +to tricked>>: money
equalNodes :::: not equal tokens: volunteer + money
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: money
equalNodes :::: trick try var: want +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> money
equalNodes :::: not equal tokens: people + money
equalSentences1 :::: One path check, NOT equal: people money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people want money
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because the people want money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the apes want to help $$ google api
ANALYZER :::: Teacher parts: apes
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the apes want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> apes
equalNodes :::: trick loop var: apes +to tricked>>: want
equalNodes :::: trick loop var: apes +to tricked>>: to
equalNodes :::: trick loop var: apes +to tricked>>: help
equalNodes :::: not equal tokens: people + apes
equalSentences1 :::: One path check, NOT equal: people apes
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> apes
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + apes
equalSentences1 :::: One path check, NOT equal: people apes
equalSentences :::: checking want >> COMPARE TO >> apes
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + apes
equalNodes :::: not equal tokens: want + apes
equalSentences1 :::: One path check, NOT equal: want apes
equalSentences :::: checking to >> COMPARE TO >> apes
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + apes
equalSentences1 :::: One path check, NOT equal: to apes
equalSentences :::: checking help >> COMPARE TO >> apes
equalNodes :::: not equal tokens: help + apes
equalSentences1 :::: One path check, NOT equal: help apes
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: apes
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the apes want to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the apes want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> apes
equalNodes :::: trick loop var: apes +to tricked>>: want
equalNodes :::: trick loop var: apes +to tricked>>: to
equalNodes :::: trick loop var: apes +to tricked>>: help
equalNodes :::: not equal tokens: people + apes
equalSentences1 :::: One path check, NOT equal: people apes
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> apes
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + apes
equalSentences1 :::: One path check, NOT equal: people apes
equalSentences :::: checking volunteer >> COMPARE TO >> apes
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + apes
equalNodes :::: not equal tokens: help + apes
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + apes
equalSentences1 :::: One path check, NOT equal: volunteer apes
equalSentences :::: checking to >> COMPARE TO >> apes
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + apes
equalSentences1 :::: One path check, NOT equal: to apes
equalSentences :::: checking help >> COMPARE TO >> apes
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + apes
equalNodes :::: not equal tokens: help + apes
equalSentences1 :::: One path check, NOT equal: help apes
equalSentences :::: checking people >> COMPARE TO >> apes
equalNodes :::: not equal tokens: people + apes
equalSentences1 :::: One path check, NOT equal: people apes
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: apes
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the apes want to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because the apes want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because he want to help $$ google api
ANALYZER :::: Teacher parts: he
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because he want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: he +to tricked>>: want
equalNodes :::: trick loop var: he +to tricked>>: to
equalNodes :::: trick loop var: he +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking want >> COMPARE TO >> he
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + he
equalNodes :::: not equal tokens: want + he
equalSentences1 :::: One path check, NOT equal: want he
equalSentences :::: checking to >> COMPARE TO >> he
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + he
equalSentences1 :::: One path check, NOT equal: to he
equalSentences :::: checking help >> COMPARE TO >> he
equalNodes :::: not equal tokens: help + he
equalSentences1 :::: One path check, NOT equal: help he
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: he
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because he want to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because he want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: he +to tricked>>: want
equalNodes :::: trick loop var: he +to tricked>>: to
equalNodes :::: trick loop var: he +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking volunteer >> COMPARE TO >> he
compare :::: special case1 V volunteer + he
equalNodes :::: equal tokens: volunteer + he
[he - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer he
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking volunteer >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking help >> COMPARE TO >> want
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalSentences1 :::: One path check, NOT equal: help want
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: want
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because he want to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because he want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because he wants to help $$ google api
ANALYZER :::: Teacher parts: he
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: wants
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because he wants to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: he +to tricked>>: wants
equalNodes :::: trick loop var: he +to tricked>>: to
equalNodes :::: trick loop var: he +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking people >> COMPARE TO >> wants
equalNodes :::: trick loop var: wants +to tricked>>: to
equalNodes :::: trick loop var: wants +to tricked>>: help
equalNodes :::: trick try var: wants +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wants
equalSentences1 :::: One path check, NOT equal: people wants
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking want >> COMPARE TO >> he
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + he
equalNodes :::: not equal tokens: want + he
equalSentences1 :::: One path check, NOT equal: want he
equalSentences :::: checking to >> COMPARE TO >> he
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + he
equalSentences1 :::: One path check, NOT equal: to he
equalSentences :::: checking help >> COMPARE TO >> he
equalNodes :::: not equal tokens: help + he
equalSentences1 :::: One path check, NOT equal: help he
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: he
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because he wants to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because he wants to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: he +to tricked>>: wants
equalNodes :::: trick loop var: he +to tricked>>: to
equalNodes :::: trick loop var: he +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking people >> COMPARE TO >> wants
equalNodes :::: trick loop var: wants +to tricked>>: to
equalNodes :::: trick loop var: wants +to tricked>>: help
equalNodes :::: trick try var: wants +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wants
equalSentences1 :::: One path check, NOT equal: people wants
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking volunteer >> COMPARE TO >> he
compare :::: special case1 V volunteer + he
equalNodes :::: equal tokens: volunteer + he
[he - volunteer]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer he
equalSentences :::: checking people >> COMPARE TO >> wants
equalNodes :::: trick loop var: people +to tricked>>: volunteer
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: people + wants
equalSentences1 :::: One path check, NOT equal: people wants
equalSentences :::: checking volunteer >> COMPARE TO >> wants
equalSentences1 :::: One path check, Set contains already: volunteer
equalSentences :::: checking to >> COMPARE TO >> wants
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + wants
equalSentences1 :::: One path check, NOT equal: to wants
equalSentences :::: checking help >> COMPARE TO >> wants
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + wants
equalNodes :::: not equal tokens: help + wants
equalSentences1 :::: One path check, NOT equal: help wants
equalSentences :::: checking people >> COMPARE TO >> wants
equalNodes :::: not equal tokens: people + wants
equalSentences1 :::: One path check, NOT equal: people wants
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: wants
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because he wants to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because he wants to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people have to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: have
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people have to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + have
equalSentences1 :::: One path check, NOT equal: people have
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + have
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
checkTokens :::: synonym fixed: have >> hold
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people hold to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hold
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people hold to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hold
checkTokens :::: synonym fixed: hold >> halt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people halt to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: halt
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people halt to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + halt
equalSentences1 :::: One path check, NOT equal: people halt
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + halt
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because the people halt to help
grade: 0
equalNodes :::: not equal tokens: help + halt
equalNodes :::: not equal tokens: want + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people halt to help
grade: 0
----finished new check-----
checkTokens :::: synonym fixed: hold >> wait
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people wait to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wait
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people wait to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wait
checkTokens :::: synonym fixed: wait >> await
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people await to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: await
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people await to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + await
using map: because the people await to help
grade: 0
equalNodes :::: trick loop var: await +to tricked>>: to
equalNodes :::: trick loop var: await +to tricked>>: help
equalNodes :::: trick try var: await +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + await
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> await
equalNodes :::: trick loop var: await +to tricked>>: to
equalNodes :::: trick loop var: await +to tricked>>: help
equalNodes :::: trick try var: await +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + await
equalSentences1 :::: One path check, NOT equal: people await
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + await
using map: because the people await to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + await
equalNodes :::: not equal tokens: want + await
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people await to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: wait +to tricked>>: to
equalNodes :::: trick loop var: wait +to tricked>>: help
equalNodes :::: trick try var: wait +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + wait
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> wait
equalNodes :::: trick loop var: wait +to tricked>>: to
equalNodes :::: trick loop var: wait +to tricked>>: help
equalNodes :::: trick try var: wait +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wait
equalSentences1 :::: One path check, NOT equal: people wait
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wait
using map: because the people wait to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because the people wait to help
grade: 0
equalNodes :::: not equal tokens: help + wait
equalNodes :::: not equal tokens: want + wait
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people wait to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hold
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hold
equalSentences1 :::: One path check, NOT equal: people hold
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hold
using map: because the people hold to help
grade: 0
using map: because the people hold to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because the people hold to help
grade: 0
checkTokens :::: synonym fixed: hold >> keep
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people keep to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: keep
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people keep to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + keep
equalSentences1 :::: One path check, NOT equal: people keep
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + keep
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because the people keep to help
grade: 0
equalNodes :::: not equal tokens: help + keep
equalNodes :::: not equal tokens: want + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people keep to help
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + hold
equalNodes :::: not equal tokens: want + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people hold to help
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + have
equalNodes :::: not equal tokens: want + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people have to help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people have to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + have
equalSentences1 :::: One path check, NOT equal: people have
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + have
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
checkTokens :::: synonym fixed: have >> hold
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people hold to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hold
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people hold to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + hold
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hold
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hold
equalSentences1 :::: One path check, NOT equal: people hold
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + hold
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
checkTokens :::: synonym fixed: hold >> halt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people halt to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: halt
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people halt to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + halt
equalSentences1 :::: One path check, NOT equal: people halt
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + halt
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
using map: because the people halt to help
grade: 0
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + halt
equalNodes :::: not equal tokens: help + halt
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people halt to help
grade: 0
----finished new check-----
checkTokens :::: synonym fixed: hold >> keep
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people keep to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: keep
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people keep to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + keep
equalSentences1 :::: One path check, NOT equal: people keep
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + keep
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
using map: because the people keep to help
grade: 0
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + keep
equalNodes :::: not equal tokens: help + keep
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people keep to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + hold
equalNodes :::: not equal tokens: help + hold
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people hold to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + have
equalNodes :::: not equal tokens: help + have
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because the people have to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because the people have to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people want help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalNodes :::: not equal tokens: to + help
equalSentences1 :::: One path check, NOT equal: to help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + help
equalSentences1 :::: One path check, NOT equal: to help
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
equalNodes :::: not equal tokens: help + help
equalSentences1 :::: One path check, NOT equal: help help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people want help
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people want help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: volunteer + help
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + want
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: not equal tokens: help + want
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + want
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people want help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people want help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they are bored $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: are
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: bored
ANALYZER :::: Teacher parts: ADJ
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they are bored, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + are
equalNodes :::: trick loop var: are +to tricked>>: bored
equalNodes :::: trick try var: are +to tricked>>: bored
equalNodes :::: not equal tokens: want + bored
equalNodes :::: not equal tokens: want + are
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: bored
equalNodes :::: trick try var: are +to tricked>>: bored
equalNodes :::: not equal tokens: people + bored
equalNodes :::: not equal tokens: people + are
equalSentences1 :::: One path check, NOT equal: people are
equalSentences :::: checking people >> COMPARE TO >> bored
equalNodes :::: not equal tokens: people + bored
equalSentences1 :::: One path check, NOT equal: people bored
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + are
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + are
equalNodes :::: not equal tokens: want + are
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they are bored
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they are bored, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + are
equalNodes :::: trick loop var: are +to tricked>>: bored
equalNodes :::: trick try var: are +to tricked>>: bored
equalNodes :::: not equal tokens: volunteer + bored
equalNodes :::: not equal tokens: volunteer + are
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: bored
equalNodes :::: trick try var: are +to tricked>>: bored
equalNodes :::: not equal tokens: people + bored
equalNodes :::: not equal tokens: people + are
equalSentences1 :::: One path check, NOT equal: people are
equalSentences :::: checking people >> COMPARE TO >> bored
equalNodes :::: not equal tokens: people + bored
equalSentences1 :::: One path check, NOT equal: people bored
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + are
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + are
equalNodes :::: not equal tokens: help + are
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + are
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they are bored
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: they are bored, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they are working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: are
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they are working for their own free will, Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: working
equalNodes :::: trick loop var: are +to tricked>>: for
equalNodes :::: trick loop var: are +to tricked>>: their
equalNodes :::: trick loop var: are +to tricked>>: own
equalNodes :::: trick loop var: are +to tricked>>: free
equalNodes :::: trick loop var: are +to tricked>>: will
equalNodes :::: not equal tokens: want + are
equalSentences1 :::: One path check, NOT equal: want are
equalSentences :::: checking want >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want working
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> are
checkTokens :::: synonym fixed: are >> ar
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they ar working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: ar
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they ar working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + ar
checkTokens :::: spelling fixed: ar >> at
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they at working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they at working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: we have insignificant word: at
equalSentences :::: checking want >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want working
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: we have insignificant word: at
equalSentences :::: checking to >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking to >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: to + their
equalSentences1 :::: One path check, NOT equal: to their
equalSentences :::: checking to >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: to + own
equalSentences1 :::: One path check, NOT equal: to own
equalSentences :::: checking to >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: to + free
equalSentences1 :::: One path check, NOT equal: to free
equalSentences :::: checking to >> COMPARE TO >> will
equalNodes :::: not equal tokens: to + will
equalSentences1 :::: One path check, NOT equal: to will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: we have insignificant word: at
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> working
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + working
equalNodes :::: not equal tokens: want + working
equalSentences1 :::: One path check, NOT equal: want working
equalSentences :::: checking to >> COMPARE TO >> working
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + working
equalSentences1 :::: One path check, NOT equal: to working
equalSentences :::: checking help >> COMPARE TO >> working
equalNodes :::: not equal tokens: help + working
equalSentences1 :::: One path check, NOT equal: help working
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: working
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they at working for their own free will
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: ar >> an
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they an working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they an working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: we have insignificant word: an
equalSentences :::: checking want >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want working
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: we have insignificant word: an
equalSentences :::: checking to >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking to >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: to + their
equalSentences1 :::: One path check, NOT equal: to their
equalSentences :::: checking to >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: to + own
equalSentences1 :::: One path check, NOT equal: to own
equalSentences :::: checking to >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: to + free
equalSentences1 :::: One path check, NOT equal: to free
equalSentences :::: checking to >> COMPARE TO >> will
equalNodes :::: not equal tokens: to + will
equalSentences1 :::: One path check, NOT equal: to will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + working
equalNodes :::: not equal tokens: want + working
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they an working for their own free will
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: ar >> art
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they art working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: art
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they art working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> art
equalNodes :::: trick loop var: art +to tricked>>: working
equalNodes :::: trick loop var: art +to tricked>>: for
equalNodes :::: trick loop var: art +to tricked>>: their
equalNodes :::: trick loop var: art +to tricked>>: own
equalNodes :::: trick loop var: art +to tricked>>: free
equalNodes :::: trick loop var: art +to tricked>>: will
equalNodes :::: not equal tokens: want + art
equalSentences1 :::: One path check, NOT equal: want art
equalSentences :::: checking want >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want working
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> art
equalNodes :::: trick loop var: art +to tricked>>: working
equalNodes :::: trick loop var: art +to tricked>>: for
equalNodes :::: trick loop var: art +to tricked>>: their
equalNodes :::: trick loop var: art +to tricked>>: own
equalNodes :::: trick loop var: art +to tricked>>: free
equalNodes :::: trick loop var: art +to tricked>>: will
equalNodes :::: not equal tokens: to + art
equalSentences1 :::: One path check, NOT equal: to art
equalSentences :::: checking to >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking to >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: to + their
equalSentences1 :::: One path check, NOT equal: to their
equalSentences :::: checking to >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: to + own
equalSentences1 :::: One path check, NOT equal: to own
equalSentences :::: checking to >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: to + free
equalSentences1 :::: One path check, NOT equal: to free
equalSentences :::: checking to >> COMPARE TO >> will
equalNodes :::: not equal tokens: to + will
equalSentences1 :::: One path check, NOT equal: to will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + working
equalNodes :::: not equal tokens: want + working
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they art working for their own free will
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: ar >> war
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they war working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: war
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they war working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + war
equalNodes :::: trick loop var: war +to tricked>>: working
equalNodes :::: trick try var: war +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> war
equalNodes :::: trick loop var: war +to tricked>>: working
equalNodes :::: trick try var: war +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want war
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> war
equalSentences1 :::: One path check, Set contains already: war
equalSentences :::: checking to >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: to + for
equalSentences1 :::: finished path check, equal: to working
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> war
equalSentences1 :::: One path check, Set contains already: war
equalSentences :::: checking help >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking help >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: help + their
equalSentences1 :::: One path check, NOT equal: help their
equalSentences :::: checking help >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: help + own
equalSentences1 :::: One path check, NOT equal: help own
equalSentences :::: checking help >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: help + free
equalSentences1 :::: One path check, NOT equal: help free
equalSentences :::: checking help >> COMPARE TO >> will
equalNodes :::: not equal tokens: help + will
equalSentences1 :::: One path check, NOT equal: help will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + war
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + war
equalNodes :::: not equal tokens: want + war
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they war working for their own free will
grade: 0
----finished new check-----
equalNodes :::: trick loop var: ar +to tricked>>: working
equalNodes :::: trick try var: ar +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> ar
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
equalNodes :::: trick loop var: ar +to tricked>>: working
equalNodes :::: trick try var: ar +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: want + for
equalSentences1 :::: finished path check, equal: want ar
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> ar
equalSentences1 :::: One path check, Set contains already: ar
equalSentences :::: checking to >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: to + for
equalSentences1 :::: finished path check, equal: to working
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> ar
equalSentences1 :::: One path check, Set contains already: ar
equalSentences :::: checking help >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking help >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: help + their
equalSentences1 :::: One path check, NOT equal: help their
equalSentences :::: checking help >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: help + own
equalSentences1 :::: One path check, NOT equal: help own
equalSentences :::: checking help >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: help + free
equalSentences1 :::: One path check, NOT equal: help free
equalSentences :::: checking help >> COMPARE TO >> will
equalNodes :::: not equal tokens: help + will
equalSentences1 :::: One path check, NOT equal: help will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + ar
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
using map: they ar working for their own free will
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + ar
equalNodes :::: not equal tokens: want + ar
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they ar working for their own free will
grade: 0
----finished new check-----
equalNodes :::: trick loop var: are +to tricked>>: working
equalNodes :::: trick loop var: are +to tricked>>: for
equalNodes :::: trick loop var: are +to tricked>>: their
equalNodes :::: trick loop var: are +to tricked>>: own
equalNodes :::: trick loop var: are +to tricked>>: free
equalNodes :::: trick loop var: are +to tricked>>: will
equalNodes :::: not equal tokens: to + are
equalSentences1 :::: One path check, NOT equal: to are
equalSentences :::: checking to >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking to >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: to + their
equalSentences1 :::: One path check, NOT equal: to their
equalSentences :::: checking to >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: to + own
equalSentences1 :::: One path check, NOT equal: to own
equalSentences :::: checking to >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: to + free
equalSentences1 :::: One path check, NOT equal: to free
equalSentences :::: checking to >> COMPARE TO >> will
equalNodes :::: not equal tokens: to + will
equalSentences1 :::: One path check, NOT equal: to will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + working
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + working
equalNodes :::: not equal tokens: want + working
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they are working for their own free will
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they are working for their own free will, Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: volunteer + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking volunteer >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: working
equalNodes :::: trick loop var: are +to tricked>>: for
equalNodes :::: trick loop var: are +to tricked>>: their
equalNodes :::: trick loop var: are +to tricked>>: own
equalNodes :::: trick loop var: are +to tricked>>: free
equalNodes :::: trick loop var: are +to tricked>>: will
equalNodes :::: not equal tokens: volunteer + are
equalSentences1 :::: One path check, NOT equal: volunteer are
equalSentences :::: checking volunteer >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: volunteer + for
equalSentences1 :::: finished path check, equal: volunteer working
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> are
checkTokens :::: synonym fixed: are >> ar
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they ar working for their own free will $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: ar
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: working
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: their
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: own
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: free
ANALYZER :::: Teacher parts: ADJ
ANALYZER :::: Teacher parts: will
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they ar working for their own free will, Wrriten by: COMPUTER, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + ar
equalNodes :::: trick loop var: ar +to tricked>>: working
equalNodes :::: trick try var: ar +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: volunteer + for
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking volunteer >> COMPARE TO >> ar
equalNodes :::: trick loop var: ar +to tricked>>: working
equalNodes :::: trick try var: ar +to tricked>>: working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: volunteer + for
equalSentences1 :::: finished path check, equal: volunteer ar
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> ar
equalSentences1 :::: One path check, Set contains already: ar
equalSentences :::: checking to >> COMPARE TO >> working
equalNodes :::: trick loop var: working +to tricked>>: for
equalNodes :::: trick try var: working +to tricked>>: for
equalNodes :::: not intresting: to + for
equalSentences1 :::: finished path check, equal: to working
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> ar
equalSentences1 :::: One path check, Set contains already: ar
equalSentences :::: checking help >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking help >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: help + their
equalSentences1 :::: One path check, NOT equal: help their
equalSentences :::: checking help >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: help + own
equalSentences1 :::: One path check, NOT equal: help own
equalSentences :::: checking help >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: help + free
equalSentences1 :::: One path check, NOT equal: help free
equalSentences :::: checking help >> COMPARE TO >> will
equalNodes :::: not equal tokens: help + will
equalSentences1 :::: One path check, NOT equal: help will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + ar
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + ar
equalNodes :::: not equal tokens: help + ar
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + ar
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they ar working for their own free will
grade: 0
----finished new check-----
equalNodes :::: trick loop var: are +to tricked>>: working
equalNodes :::: trick loop var: are +to tricked>>: for
equalNodes :::: trick loop var: are +to tricked>>: their
equalNodes :::: trick loop var: are +to tricked>>: own
equalNodes :::: trick loop var: are +to tricked>>: free
equalNodes :::: trick loop var: are +to tricked>>: will
equalNodes :::: not equal tokens: to + are
equalSentences1 :::: One path check, NOT equal: to are
equalSentences :::: checking to >> COMPARE TO >> working
equalSentences1 :::: One path check, Set contains already: working
equalSentences :::: we have insignificant word: for
equalSentences :::: checking to >> COMPARE TO >> their
equalNodes :::: trick loop var: their +to tricked>>: own
equalNodes :::: trick loop var: their +to tricked>>: free
equalNodes :::: trick loop var: their +to tricked>>: will
equalNodes :::: not equal tokens: to + their
equalSentences1 :::: One path check, NOT equal: to their
equalSentences :::: checking to >> COMPARE TO >> own
equalNodes :::: trick loop var: own +to tricked>>: free
equalNodes :::: trick loop var: own +to tricked>>: will
equalNodes :::: not equal tokens: to + own
equalSentences1 :::: One path check, NOT equal: to own
equalSentences :::: checking to >> COMPARE TO >> free
equalNodes :::: trick loop var: free +to tricked>>: will
equalNodes :::: not equal tokens: to + free
equalSentences1 :::: One path check, NOT equal: to free
equalSentences :::: checking to >> COMPARE TO >> will
equalNodes :::: not equal tokens: to + will
equalSentences1 :::: One path check, NOT equal: to will
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + working
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + working
equalNodes :::: not equal tokens: help + working
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + working
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they are working for their own free will
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: they are working for their own free will, Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ the people need money $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: money
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: the people need money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ the people want money $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: money
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: the people want money, Wrriten by: COMPUTER, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> money
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> money
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences :::: checking help >> COMPARE TO >> money
equalNodes :::: not equal tokens: help + money
equalSentences1 :::: One path check, NOT equal: help money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: money
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: the people want money
grade: 0
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: money
equalNodes :::: trick try var: need +to tricked>>: money
equalNodes :::: not equal tokens: want + money
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: money
equalNodes :::: trick try var: need +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> money
equalNodes :::: not equal tokens: people + money
equalSentences1 :::: One path check, NOT equal: people money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: the
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
using map: the people need money
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: the people need money
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: the people need money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + need
equalNodes :::: trick loop var: need +to tricked>>: money
equalNodes :::: trick try var: need +to tricked>>: money
equalNodes :::: not equal tokens: volunteer + money
equalNodes :::: not equal tokens: volunteer + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: money
equalNodes :::: trick try var: need +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> money
equalNodes :::: not equal tokens: people + money
equalSentences1 :::: One path check, NOT equal: people money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: volunteer + need
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalNodes :::: not equal tokens: help + need
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking volunteer >> COMPARE TO >> people
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + people
equalSentences1 :::: One path check, NOT equal: volunteer people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: the people need money
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: the people need money, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they dont have money $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: dont
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: have
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: money
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they dont have money, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + dont
equalNodes :::: trick loop var: dont +to tricked>>: have
equalNodes :::: trick try var: dont +to tricked>>: have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: want + money
equalNodes :::: not equal tokens: want + have
equalNodes :::: trick loop var: dont +to tricked>>: money
equalNodes :::: not equal tokens: want + dont
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> dont
equalNodes :::: trick loop var: dont +to tricked>>: have
equalNodes :::: trick try var: dont +to tricked>>: have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + have
equalNodes :::: trick loop var: dont +to tricked>>: money
equalNodes :::: not equal tokens: people + dont
equalSentences1 :::: One path check, NOT equal: people dont
equalSentences :::: checking people >> COMPARE TO >> have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + have
equalSentences1 :::: One path check, NOT equal: people have
equalSentences :::: checking people >> COMPARE TO >> money
equalNodes :::: not equal tokens: people + money
equalSentences1 :::: One path check, NOT equal: people money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + dont
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + dont
equalNodes :::: not equal tokens: want + dont
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they dont have money
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they dont have money, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + dont
equalNodes :::: trick loop var: dont +to tricked>>: have
equalNodes :::: trick try var: dont +to tricked>>: have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: volunteer + money
equalNodes :::: not equal tokens: volunteer + have
equalNodes :::: trick loop var: dont +to tricked>>: money
equalNodes :::: not equal tokens: volunteer + dont
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> dont
equalNodes :::: trick loop var: dont +to tricked>>: have
equalNodes :::: trick try var: dont +to tricked>>: have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + have
equalNodes :::: trick loop var: dont +to tricked>>: money
equalNodes :::: not equal tokens: people + dont
equalSentences1 :::: One path check, NOT equal: people dont
equalSentences :::: checking people >> COMPARE TO >> have
equalNodes :::: trick loop var: have +to tricked>>: money
equalNodes :::: trick try var: have +to tricked>>: money
equalNodes :::: not equal tokens: people + money
equalNodes :::: not equal tokens: people + have
equalSentences1 :::: One path check, NOT equal: people have
equalSentences :::: checking people >> COMPARE TO >> money
equalNodes :::: not equal tokens: people + money
equalSentences1 :::: One path check, NOT equal: people money
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: volunteer + dont
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + dont
equalNodes :::: not equal tokens: help + dont
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + dont
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking volunteer >> COMPARE TO >> they
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + they
equalSentences1 :::: One path check, NOT equal: volunteer they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences :::: checking people >> COMPARE TO >> they
equalNodes :::: not equal tokens: people + they
equalSentences1 :::: One path check, NOT equal: people they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they dont have money
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: they dont have money, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ People choose to volunteer because they want money. $$ google api
ANALYZER :::: Teacher parts: People
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: choose
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: volunteer
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: money
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: People choose to volunteer because they want money., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
compare :::: passed checkRelationToParent V people + People
equalNodes :::: equal tokens: people + People
[People - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: because
equalNodes :::: trick loop var: choose +to tricked>>: they
equalNodes :::: trick loop var: choose +to tricked>>: want
equalNodes :::: trick try var: choose +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people People
equalSentences :::: checking want >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking want >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: want + volunteer
equalNodes :::: trick loop var: choose +to tricked>>: because
equalNodes :::: trick loop var: choose +to tricked>>: they
equalNodes :::: trick loop var: choose +to tricked>>: want
equalNodes :::: trick try var: choose +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want choose
equalSentences :::: checking to >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, People - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: they +to tricked>>: want
equalNodes :::: trick loop var: they +to tricked>>: money
equalNodes :::: trick loop var: they +to tricked>>: .
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: money
equalNodes :::: trick try var: want +to tricked>>: money
equalNodes :::: trick loop var: money +to tricked>>: .
equalNodes :::: not equal tokens: to + money
equalNodes :::: trick loop var: want +to tricked>>: .
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: trick loop var: money +to tricked>>: .
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences :::: we have insignificant word: .
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
compare :::: passed checkRelationToParent V people + People
equalNodes :::: equal tokens: people + People
[People - people]
equalNodes :::: there are fathers: want + choose
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + choose
equalNodes :::: not equal tokens: want + choose
equalSentences1 :::: One path check, NOT equal: people People
equalSentences :::: checking want >> COMPARE TO >> People
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + People
equalNodes :::: not equal tokens: want + People
equalSentences1 :::: One path check, NOT equal: want People
equalSentences :::: checking to >> COMPARE TO >> People
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + People
equalSentences1 :::: One path check, NOT equal: to People
equalSentences :::: checking help >> COMPARE TO >> People
equalNodes :::: not equal tokens: help + People
equalSentences1 :::: One path check, NOT equal: help People
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: People
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: People choose to volunteer because they want money.
grade: 0
getGrade :::: TEACHER :Answer: people volunteer to help people, Wrriten by: TEACHER, Grade: 100, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: People choose to volunteer because they want money., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
compare :::: passed checkRelationToParent V people + People
equalNodes :::: equal tokens: people + People
[People - people]
equalNodes :::: there are fathers: volunteer + choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people People
equalSentences :::: checking volunteer >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking volunteer >> COMPARE TO >> choose
equalNodes :::: trick loop var: choose +to tricked>>: to
equalNodes :::: trick loop var: choose +to tricked>>: volunteer
equalNodes :::: trick try var: choose +to tricked>>: volunteer
compare :::: passed checkTokens V volunteer + volunteer
compare :::: passed checkParts V volunteer + volunteer
compare :::: passed checkRelationToParent V volunteer + volunteer
equalNodes :::: equal tokens: volunteer + volunteer
[volunteer - volunteer, People - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: volunteer choose
equalSentences :::: checking to >> COMPARE TO >> People
equalSentences1 :::: One path check, Set contains already: People
equalSentences :::: checking to >> COMPARE TO >> choose
equalSentences1 :::: One path check, Set contains already: choose
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, volunteer - volunteer, People - people]
equalNodes :::: there are fathers: help + volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: help + volunteer
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> volunteer
equalNodes :::: trick loop var: volunteer +to tricked>>: because
equalNodes :::: trick loop var: volunteer +to tricked>>: they
equalNodes :::: trick loop var: volunteer +to tricked>>: want
equalNodes :::: trick loop var: volunteer +to tricked>>: money
equalNodes :::: trick loop var: volunteer +to tricked>>: .
equalNodes :::: not equal tokens: to + volunteer
equalSentences1 :::: One path check, NOT equal: to volunteer
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: they +to tricked>>: want
equalNodes :::: trick loop var: they +to tricked>>: money
equalNodes :::: trick loop var: they +to tricked>>: .
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: money
equalNodes :::: trick try var: want +to tricked>>: money
equalNodes :::: trick loop var: money +to tricked>>: .
equalNodes :::: not equal tokens: to + money
equalNodes :::: trick loop var: want +to tricked>>: .
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking to >> COMPARE TO >> money
equalNodes :::: trick loop var: money +to tricked>>: .
equalNodes :::: not equal tokens: to + money
equalSentences1 :::: One path check, NOT equal: to money
equalSentences :::: we have insignificant word: .
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
compare :::: passed checkRelationToParent V people + People
equalNodes :::: equal tokens: people + People
[People - people]
equalNodes :::: there are fathers: volunteer + choose
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: people + choose
equalNodes :::: not equal tokens: help + choose
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + choose
equalSentences1 :::: One path check, NOT equal: people People
equalSentences :::: checking volunteer >> COMPARE TO >> People
equalNodes :::: trick loop var: volunteer +to tricked>>: to
equalNodes :::: trick loop var: volunteer +to tricked>>: help
equalNodes :::: trick try var: volunteer +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
equalNodes :::: not equal tokens: people + People
equalNodes :::: not equal tokens: help + People
equalNodes :::: trick loop var: volunteer +to tricked>>: people
equalNodes :::: not equal tokens: volunteer + People
equalSentences1 :::: One path check, NOT equal: volunteer People
equalSentences :::: checking to >> COMPARE TO >> People
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + People
equalSentences1 :::: One path check, NOT equal: to People
equalSentences :::: checking help >> COMPARE TO >> People
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
equalNodes :::: not equal tokens: people + People
equalNodes :::: not equal tokens: help + People
equalSentences1 :::: One path check, NOT equal: help People
equalSentences :::: checking people >> COMPARE TO >> People
compare :::: passed checkTokens V people + People
compare :::: passed checkParts V people + People
equalNodes :::: not equal tokens: people + People
equalSentences1 :::: One path check, NOT equal: people People
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: People
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: People choose to volunteer because they want money.
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: People choose to volunteer because they want money., Wrriten by: STUDENT, Grade: -2, Significant Words: 7, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people need to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
using map: because people need to help
grade: 0
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 100
equalSentences1 :::: grade: 100
finished grading: because people need to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
