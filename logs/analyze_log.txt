getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d8a58f9984c11fa0e904b1
getGrade :::: STUDENT :Answer: to help, Wrriten by: STUDENT, Grade: 50, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: 59d8a71d9984c11fa0e904c4
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalNodes :::: not equal tokens: want + to
equalSentences1 :::: One path check, NOT equal: want to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want help
equalSentences1 :::: finished path check WITH FOUND=TRUE: to help because people want to help
equalSentences1 :::: equalset = : [to - to, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 2
finished grading: to help
grade: 50
### SYNTAX ANALYZER RESULT:
### student: Answer: to help, Wrriten by: STUDENT, Grade: 50, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: 59d8a71d9984c11fa0e904c4
### grade: 50
### WORDS ANALYZER RESULT:
### student: Answer: to help, Wrriten by: STUDENT, Grade: 50, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: 59d8a71d9984c11fa0e904c4
### grade: 50
### LEVENSHTEIN SUCSESS!
### teacher: Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d8a58f9984c11fa0e904b1
### student: Answer: because people want to help, Wrriten by: STUDENT, Grade: 100, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d8a6e49984c11fa0e904be
### LEVENSHTEIN SUCSESS!
### teacher: Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d8a58f9984c11fa0e904b1
### student: Answer: because people want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d8a6ed9984c11fa0e904bf
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d8a58f9984c11fa0e904b1
getGrade :::: STUDENT :Answer: because peipole want to halp, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d8a7079984c11fa0e904c1
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> peipole
checkTokens :::: spelling fixed: peipole >> people
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to halp $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: halp
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d8a58f9984c11fa0e904b1
getGrade :::: STUDENT :Answer: because people want to halp, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, people - people, want - want]
equalNodes :::: there are fathers: help + halp
using map: because people want to help
grade: 100
equalNodes :::: not equal tokens: help + halp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking to >> COMPARE TO >> halp
equalNodes :::: not equal tokens: to + halp
equalSentences1 :::: One path check, NOT equal: to halp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, people - people, want - want]
equalNodes :::: there are fathers: help + halp
using map: because people want to help
grade: 100
equalNodes :::: not equal tokens: help + halp
equalSentences1 :::: One path check, NOT equal: to to
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because people want to halp
grade: 90
----finished new check-----
equalNodes :::: trick loop var: peipole +to tricked>>: want
equalNodes :::: trick loop var: peipole +to tricked>>: to
equalNodes :::: trick loop var: peipole +to tricked>>: halp
equalNodes :::: not equal tokens: people + peipole
equalSentences1 :::: One path check, NOT equal: people peipole
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: halp
equalNodes :::: trick try var: want +to tricked>>: halp
equalNodes :::: not equal tokens: people + halp
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: halp
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> halp
equalNodes :::: not equal tokens: people + halp
equalSentences1 :::: One path check, NOT equal: people halp
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 90
equalSentences1 :::: grade: 90
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> peipole
using map: because people want to halp
grade: 90
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + peipole
equalSentences1 :::: One path check, NOT equal: people peipole
equalSentences :::: checking want >> COMPARE TO >> peipole
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + peipole
equalNodes :::: not equal tokens: want + peipole
equalSentences1 :::: One path check, NOT equal: want peipole
equalSentences :::: checking to >> COMPARE TO >> peipole
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + peipole
equalSentences1 :::: One path check, NOT equal: to peipole
equalSentences :::: checking help >> COMPARE TO >> peipole
equalNodes :::: not equal tokens: help + peipole
equalSentences1 :::: One path check, NOT equal: help peipole
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peipole
equalSentences1 :::: finishedGrade: 85
equalSentences1 :::: grade: 85
finished grading: because peipole want to halp
grade: 90
### SYNTAX ANALYZER RESULT:
### student: Answer: because peipole want to halp, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d8a7079984c11fa0e904c1
### grade: 90
### WORDS ANALYZER RESULT:
### student: Answer: because peipole want to halp, Wrriten by: STUDENT, Grade: 90, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d8a7079984c11fa0e904c1
### grade: 90
