### LEVENSHTEIN SUCSESS!
### teacher: Answer: because people need to help, Wrriten by: TEACHER, Grade: 0, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c839984c12318a89b44
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: true, aid: 59d88c799984c12318a89b42
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people need to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: people need to help
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: peple + help
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
equalNodes :::: not equal tokens: help + help
equalSentences1 :::: One path check, NOT equal: help help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: -5
equalSentences1 :::: grade: 0
finished grading: people want to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help people $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people want to help people, Wrriten by: COMPUTER, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help people
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people want to help people
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: want + people
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: people need to help people
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help people $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people want to help people, Wrriten by: COMPUTER, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: help + help
equalSentences1 :::: One path check, NOT equal: help help
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: help
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalNodes :::: not equal tokens: help + to
equalSentences1 :::: One path check, NOT equal: help to
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: to
equalSentences1 :::: finishedGrade: -5
equalSentences1 :::: grade: 0
finished grading: people want to help people
grade: 0
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: want + people
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
using map: people need to help
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: peple + help
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
using map: people need to help people
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: want + people
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
using map: people need to help
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: peple + help
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88da49984c12318a89b46
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because they need to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
### LEVENSHTEIN SUCSESS!
### teacher: Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
### student: Answer: because they need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f26f1ea772ea4d4648d
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d886e79984c12318a89b27
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
using map: people need to help people
grade: 95
getGrade :::: TEACHER :Answer: they wish to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: true, syntaxable: true, aid: 59d88c609984c12318a89b3d
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: wish
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: trick loop var: they +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking wish >> COMPARE TO >> people
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalNodes :::: trick loop var: wish +to tricked>>: people
equalNodes :::: not equal tokens: wish + people
equalSentences1 :::: One path check, NOT equal: wish people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because peple want to helpp, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c6b9984c12318a89b3f
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking peple >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: peple + need
equalSentences1 :::: One path check, NOT equal: peple need
equalSentences :::: checking peple >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: peple + to
equalSentences1 :::: One path check, NOT equal: peple to
equalSentences :::: checking peple >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: peple + people
equalNodes :::: not equal tokens: peple + help
equalSentences1 :::: One path check, NOT equal: peple help
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: peple
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking peple >> COMPARE TO >> people
equalNodes :::: trick loop var: peple +to tricked>>: want
equalNodes :::: trick loop var: peple +to tricked>>: to
equalNodes :::: trick loop var: peple +to tricked>>: helpp
equalNodes :::: not equal tokens: peple + people
equalSentences1 :::: One path check, NOT equal: peple people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: helpp
equalNodes :::: trick try var: want +to tricked>>: helpp
equalNodes :::: not equal tokens: helpp + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: helpp
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking helpp >> COMPARE TO >> people
equalNodes :::: not equal tokens: helpp + people
equalSentences1 :::: One path check, NOT equal: helpp people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 15, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88c719984c12318a89b40
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
getGrade :::: TEACHER :Answer: because people want help, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: true, syntaxable: false, aid: 59d88c879984c12318a89b45
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: want + people
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: true, aid: 59d88c819984c12318a89b43
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people need to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [to - to, help - help, want - want, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, want - want, people - people]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help, want - want, people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, help - help, want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [to - to, help - help, want - want, people - people]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because people need to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
using map: because people need to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because they need to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because they need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because they want to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because they want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[they - people, want - want, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, want - want, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, they - people, want - want, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, want - want, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, they - people, want - want, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because they want to help
equalSentences1 :::: equalset = : [help - help, they - people, want - want, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[they - people, want - want, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, want - want, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, they - people, want - want, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, they - people, want - want, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, they - people, want - want, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because they want to help because people want to help
equalSentences1 :::: equalset = : [help - help, they - people, want - want, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because they want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + they
equalNodes :::: not equal tokens: want + they
equalSentences1 :::: One path check, NOT equal: want they
equalSentences :::: checking to >> COMPARE TO >> they
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + they
equalSentences1 :::: One path check, NOT equal: to they
equalSentences :::: checking help >> COMPARE TO >> they
equalNodes :::: not equal tokens: help + they
equalSentences1 :::: One path check, NOT equal: help they
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because they need to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because they need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because they need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
### grade: 95
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
using map: because people need to help
grade: 95
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: true, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 0
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
using map: because people need to help
grade: 95
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: true, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88f82f1ea772ea4d46490
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people need to help people $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: 59d88fbcf1ea772ea4d46492
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help people $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: people want to help people, Wrriten by: COMPUTER, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help people
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people want to help people
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: want + people
equalNodes :::: not equal tokens: want + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: people need to help people
grade: 95
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: true, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
getGrade :::: STUDENT :Answer: people need to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: 59d88fbcf1ea772ea4d46492
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: trick loop var: people +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalNodes :::: trick loop var: need +to tricked>>: people
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: they + people
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help people
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: 59d88fbcf1ea772ea4d46492
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help people, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: 59d88fbcf1ea772ea4d46492
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people need to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fc1f1ea772ea4d46493
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: 59d88f79f1ea772ea4d4648f
getGrade :::: STUDENT :Answer: people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: people need to help
grade: 95
getGrade :::: TEACHER :Answer: because they need to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: true, syntaxable: false, aid: 59d88fa0f1ea772ea4d46491
getGrade :::: STUDENT :Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fc1f1ea772ea4d46493
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: people +to tricked>>: need
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking they >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: they + help
equalNodes :::: not equal tokens: they + need
equalSentences1 :::: One path check, NOT equal: they need
equalSentences :::: checking they >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: they + to
equalSentences1 :::: One path check, NOT equal: they to
equalSentences :::: checking they >> COMPARE TO >> help
equalNodes :::: not equal tokens: they + help
equalSentences1 :::: One path check, NOT equal: they help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: they
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking they >> COMPARE TO >> people
equalNodes :::: trick loop var: they +to tricked>>: need
equalNodes :::: trick loop var: they +to tricked>>: to
equalNodes :::: trick loop var: they +to tricked>>: help
equalNodes :::: not equal tokens: they + people
equalSentences1 :::: One path check, NOT equal: they people
equalSentences :::: checking need >> COMPARE TO >> people
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: need + people
equalSentences1 :::: One path check, NOT equal: need people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: people need to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fc1f1ea772ea4d46493
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: 59d88fc1f1ea772ea4d46493
### grade: 0
