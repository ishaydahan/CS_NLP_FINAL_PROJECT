$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ want to help $$ google api
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, to - to, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, to - to, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: want to help because people want to help
equalSentences1 :::: equalset = : [want - want, to - to, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 3
finished grading: want to help
grade: 75
### SYNTAX ANALYZER RESULT:
### student: Answer: want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 75
### WORDS ANALYZER RESULT:
### student: Answer: want to help, Wrriten by: STUDENT, Grade: 75, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 75
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ to help $$ google api
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalNodes :::: not equal tokens: want + to
equalSentences1 :::: One path check, NOT equal: want to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want help
equalSentences1 :::: finished path check WITH FOUND=TRUE: to help because people want to help
equalSentences1 :::: equalset = : [to - to, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 2
finished grading: to help
grade: 50
### SYNTAX ANALYZER RESULT:
### student: Answer: to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
### grade: 50
### WORDS ANALYZER RESULT:
### student: Answer: to help, Wrriten by: STUDENT, Grade: 50, Significant Words: 2, Teacher verified: false, syntaxable: false, aid: null
### grade: 50
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ to help people $$ google api
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: trick loop var: to +to tricked>>: people
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking want >> COMPARE TO >> to
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + to
equalNodes :::: not equal tokens: want + to
equalSentences1 :::: One path check, NOT equal: want to
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences :::: checking want >> COMPARE TO >> help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want help
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + people
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: to help people
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: to help people, Wrriten by: STUDENT, Grade: 0, Significant Words: 3, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people hate to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hate
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hate to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hate
equalNodes :::: trick loop var: hate +to tricked>>: to
equalNodes :::: trick loop var: hate +to tricked>>: help
equalNodes :::: trick try var: hate +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hate
equalSentences1 :::: One path check, NOT equal: people hate
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hate
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hate
equalNodes :::: not equal tokens: want + hate
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hate to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people hate to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: because people hate to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because children want to help $$ google api
ANALYZER :::: Teacher parts: children
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because children want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> children
equalNodes :::: trick loop var: children +to tricked>>: want
equalNodes :::: trick loop var: children +to tricked>>: to
equalNodes :::: trick loop var: children +to tricked>>: help
equalNodes :::: not equal tokens: people + children
equalSentences1 :::: One path check, NOT equal: people children
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> children
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + children
equalSentences1 :::: One path check, NOT equal: people children
equalSentences :::: checking want >> COMPARE TO >> children
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + children
equalNodes :::: not equal tokens: want + children
equalSentences1 :::: One path check, NOT equal: want children
equalSentences :::: checking to >> COMPARE TO >> children
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + children
equalSentences1 :::: One path check, NOT equal: to children
equalSentences :::: checking help >> COMPARE TO >> children
equalNodes :::: not equal tokens: help + children
equalSentences1 :::: One path check, NOT equal: help children
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: children
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because children want to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because children want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: because children want to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because he want to help $$ google api
ANALYZER :::: Teacher parts: he
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because he want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: he +to tricked>>: want
equalNodes :::: trick loop var: he +to tricked>>: to
equalNodes :::: trick loop var: he +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking people >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + want
equalSentences1 :::: One path check, NOT equal: people want
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> he
equalNodes :::: trick loop var: people +to tricked>>: want
equalNodes :::: trick loop var: people +to tricked>>: to
equalNodes :::: trick loop var: people +to tricked>>: help
equalNodes :::: not equal tokens: people + he
equalSentences1 :::: One path check, NOT equal: people he
equalSentences :::: checking want >> COMPARE TO >> he
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + he
equalNodes :::: not equal tokens: want + he
equalSentences1 :::: One path check, NOT equal: want he
equalSentences :::: checking to >> COMPARE TO >> he
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + he
equalSentences1 :::: One path check, NOT equal: to he
equalSentences :::: checking help >> COMPARE TO >> he
equalNodes :::: not equal tokens: help + he
equalSentences1 :::: One path check, NOT equal: help he
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: he
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because he want to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because he want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: because he want to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people love to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: love
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people love to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + love
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: help
equalNodes :::: trick try var: love +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + love
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> love
equalNodes :::: trick loop var: love +to tricked>>: to
equalNodes :::: trick loop var: love +to tricked>>: help
equalNodes :::: trick try var: love +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + love
equalSentences1 :::: One path check, NOT equal: people love
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + love
checkTokens :::: synonym fixed: love >> bang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people bang to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: bang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people bang to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + bang
equalNodes :::: trick loop var: bang +to tricked>>: to
equalNodes :::: trick loop var: bang +to tricked>>: help
equalNodes :::: trick try var: bang +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + bang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> bang
equalNodes :::: trick loop var: bang +to tricked>>: to
equalNodes :::: trick loop var: bang +to tricked>>: help
equalNodes :::: trick try var: bang +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + bang
equalSentences1 :::: One path check, NOT equal: people bang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + bang
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
checkTokens :::: synonym fixed: bang >> belt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people belt to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: belt
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people belt to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + belt
using map: because people belt to help
grade: 0
checkTokens :::: synonym fixed: belt >> whang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people whang to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: whang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people whang to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + whang
checkTokens :::: spelling fixed: whang >> Wang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people Wang to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: Wang
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people Wang to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + help
equalNodes :::: not equal tokens: want + help
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> Wang
equalNodes :::: trick loop var: Wang +to tricked>>: to
equalNodes :::: trick loop var: Wang +to tricked>>: help
equalNodes :::: not equal tokens: people + Wang
equalSentences1 :::: One path check, NOT equal: people Wang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + help
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> Wang
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> Wang
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + Wang
equalNodes :::: not equal tokens: want + Wang
equalSentences1 :::: One path check, NOT equal: want Wang
equalSentences :::: checking to >> COMPARE TO >> Wang
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + Wang
equalSentences1 :::: One path check, NOT equal: to Wang
equalSentences :::: checking help >> COMPARE TO >> Wang
equalNodes :::: not equal tokens: help + Wang
equalSentences1 :::: One path check, NOT equal: help Wang
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: Wang
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people Wang to help
grade: 0
----finished new check-----
checkTokens :::: spelling fixed: whang >> hang
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people hang to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hang
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hang to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hang
checkTokens :::: synonym fixed: hang >> bent
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people bent to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: bent
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people bent to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + bent
using map: because people bent to help
grade: 0
equalNodes :::: trick loop var: bent +to tricked>>: to
equalNodes :::: trick loop var: bent +to tricked>>: help
equalNodes :::: trick try var: bent +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + bent
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> bent
equalNodes :::: trick loop var: bent +to tricked>>: to
equalNodes :::: trick loop var: bent +to tricked>>: help
equalNodes :::: trick try var: bent +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + bent
equalSentences1 :::: One path check, NOT equal: people bent
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + bent
using map: because people bent to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + bent
equalNodes :::: not equal tokens: want + bent
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people bent to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: hang +to tricked>>: to
equalNodes :::: trick loop var: hang +to tricked>>: help
equalNodes :::: trick try var: hang +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hang
equalNodes :::: trick loop var: hang +to tricked>>: to
equalNodes :::: trick loop var: hang +to tricked>>: help
equalNodes :::: trick try var: hang +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hang
equalSentences1 :::: One path check, NOT equal: people hang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hang
using map: because people hang to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hang
equalNodes :::: not equal tokens: want + hang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hang to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: whang +to tricked>>: to
equalNodes :::: trick loop var: whang +to tricked>>: help
equalNodes :::: trick try var: whang +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + whang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> whang
equalNodes :::: trick loop var: whang +to tricked>>: to
equalNodes :::: trick loop var: whang +to tricked>>: help
equalNodes :::: trick try var: whang +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + whang
equalSentences1 :::: One path check, NOT equal: people whang
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + whang
using map: because people whang to help
grade: 0
using map: because people whang to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people whang to help
grade: 0
equalNodes :::: not equal tokens: help + whang
equalNodes :::: not equal tokens: want + whang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people whang to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: belt +to tricked>>: to
equalNodes :::: trick loop var: belt +to tricked>>: help
equalNodes :::: trick try var: belt +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + belt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> belt
equalNodes :::: trick loop var: belt +to tricked>>: to
equalNodes :::: trick loop var: belt +to tricked>>: help
equalNodes :::: trick try var: belt +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + belt
equalSentences1 :::: One path check, NOT equal: people belt
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + belt
using map: because people belt to help
grade: 0
using map: because people belt to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + belt
equalNodes :::: not equal tokens: want + belt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people belt to help
grade: 0
----finished new check-----
checkTokens :::: synonym fixed: bang >> hump
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people hump to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hump
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hump to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hump
using map: because people hump to help
grade: 0
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: help
equalNodes :::: trick try var: hump +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hump
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hump
equalNodes :::: trick loop var: hump +to tricked>>: to
equalNodes :::: trick loop var: hump +to tricked>>: help
equalNodes :::: trick try var: hump +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hump
equalSentences1 :::: One path check, NOT equal: people hump
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hump
using map: because people hump to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + hump
equalNodes :::: not equal tokens: want + hump
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hump to help
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + bang
equalNodes :::: not equal tokens: want + bang
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people bang to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people love to help
grade: 0
equalNodes :::: not equal tokens: help + love
equalNodes :::: not equal tokens: want + love
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people love to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people love to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: because people love to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people have to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: have
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people have to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> have
equalNodes :::: trick loop var: have +to tricked>>: to
equalNodes :::: trick loop var: have +to tricked>>: help
equalNodes :::: trick try var: have +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + have
equalSentences1 :::: One path check, NOT equal: people have
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + have
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
checkTokens :::: synonym fixed: have >> hold
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people hold to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: hold
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people hold to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hold
checkTokens :::: synonym fixed: hold >> halt
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people halt to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: halt
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people halt to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> halt
equalNodes :::: trick loop var: halt +to tricked>>: to
equalNodes :::: trick loop var: halt +to tricked>>: help
equalNodes :::: trick try var: halt +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + halt
equalSentences1 :::: One path check, NOT equal: people halt
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + halt
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people halt to help
grade: 0
equalNodes :::: not equal tokens: help + halt
equalNodes :::: not equal tokens: want + halt
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people halt to help
grade: 0
----finished new check-----
checkTokens :::: synonym fixed: hold >> wait
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people wait to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wait
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people wait to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wait
checkTokens :::: synonym fixed: wait >> await
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people await to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: await
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people await to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + await
using map: because people await to help
grade: 0
equalNodes :::: trick loop var: await +to tricked>>: to
equalNodes :::: trick loop var: await +to tricked>>: help
equalNodes :::: trick try var: await +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + await
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> await
equalNodes :::: trick loop var: await +to tricked>>: to
equalNodes :::: trick loop var: await +to tricked>>: help
equalNodes :::: trick try var: await +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + await
equalSentences1 :::: One path check, NOT equal: people await
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + await
using map: because people await to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + await
equalNodes :::: not equal tokens: want + await
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people await to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: wait +to tricked>>: to
equalNodes :::: trick loop var: wait +to tricked>>: help
equalNodes :::: trick try var: wait +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + wait
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> wait
equalNodes :::: trick loop var: wait +to tricked>>: to
equalNodes :::: trick loop var: wait +to tricked>>: help
equalNodes :::: trick try var: wait +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wait
equalSentences1 :::: One path check, NOT equal: people wait
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wait
using map: because people wait to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people wait to help
grade: 0
equalNodes :::: not equal tokens: help + wait
equalNodes :::: not equal tokens: want + wait
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people wait to help
grade: 0
----finished new check-----
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> hold
equalNodes :::: trick loop var: hold +to tricked>>: to
equalNodes :::: trick loop var: hold +to tricked>>: help
equalNodes :::: trick try var: hold +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + hold
equalSentences1 :::: One path check, NOT equal: people hold
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + hold
using map: because people hold to help
grade: 0
using map: because people hold to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people hold to help
grade: 0
checkTokens :::: synonym fixed: hold >> keep
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people keep to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: keep
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people keep to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> keep
equalNodes :::: trick loop var: keep +to tricked>>: to
equalNodes :::: trick loop var: keep +to tricked>>: help
equalNodes :::: trick try var: keep +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + keep
equalSentences1 :::: One path check, NOT equal: people keep
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + keep
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
using map: because people keep to help
grade: 0
equalNodes :::: not equal tokens: help + keep
equalNodes :::: not equal tokens: want + keep
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people keep to help
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + hold
equalNodes :::: not equal tokens: want + hold
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people hold to help
grade: 0
----finished new check-----
equalNodes :::: not equal tokens: help + have
equalNodes :::: not equal tokens: want + have
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: because people have to help
grade: 0
### SYNTAX ANALYZER RESULT:
### student: Answer: because people have to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
### WORDS ANALYZER RESULT:
### student: Answer: because people have to help, Wrriten by: STUDENT, Grade: 0, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people need to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: need
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
checkTokens :::: synonym fixed: need >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> need
equalNodes :::: trick loop var: need +to tricked>>: to
equalNodes :::: trick loop var: need +to tricked>>: help
equalNodes :::: trick try var: need +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + need
equalSentences1 :::: One path check, NOT equal: people need
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + need
using map: because people need to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + need
equalNodes :::: not equal tokens: want + need
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because people need to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people need to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
### LEVENSHTEIN SUCSESS!
### teacher: Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
### student: Answer: because people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people wish to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wish
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people wish to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wish
checkTokens :::: synonym fixed: wish >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + wish
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> wish
equalNodes :::: trick loop var: wish +to tricked>>: to
equalNodes :::: trick loop var: wish +to tricked>>: help
equalNodes :::: trick try var: wish +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + wish
equalSentences1 :::: One path check, NOT equal: people wish
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wish
using map: because people wish to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + wish
equalNodes :::: not equal tokens: want + wish
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because people wish to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people wish to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people wish to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people desire to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: desire
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people desire to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + desire
checkTokens :::: synonym fixed: desire >> want
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
----starting new check-----
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people want to help, Wrriten by: COMPUTER, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people want to help
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people want to help
grade: 95
----finished new check-----
equalNodes :::: trick loop var: desire +to tricked>>: to
equalNodes :::: trick loop var: desire +to tricked>>: help
equalNodes :::: trick try var: desire +to tricked>>: help
equalNodes :::: not equal tokens: want + help
equalNodes :::: not equal tokens: want + desire
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking people >> COMPARE TO >> desire
equalNodes :::: trick loop var: desire +to tricked>>: to
equalNodes :::: trick loop var: desire +to tricked>>: help
equalNodes :::: trick try var: desire +to tricked>>: help
equalNodes :::: not equal tokens: people + help
equalNodes :::: not equal tokens: people + desire
equalSentences1 :::: One path check, NOT equal: people desire
equalSentences :::: checking people >> COMPARE TO >> to
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: people + to
equalSentences1 :::: One path check, NOT equal: people to
equalSentences :::: checking people >> COMPARE TO >> help
equalNodes :::: not equal tokens: people + help
equalSentences1 :::: One path check, NOT equal: people help
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + desire
using map: because people desire to help
grade: 0
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + desire
equalNodes :::: not equal tokens: want + desire
equalSentences1 :::: One path check, NOT equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + people
equalNodes :::: not equal tokens: want + people
equalSentences1 :::: One path check, NOT equal: want people
equalSentences :::: checking to >> COMPARE TO >> people
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + people
equalSentences1 :::: One path check, NOT equal: to people
equalSentences :::: checking help >> COMPARE TO >> people
equalNodes :::: not equal tokens: help + people
equalSentences1 :::: One path check, NOT equal: help people
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: people
equalSentences1 :::: finishedGrade: 95
equalSentences1 :::: grade: 95
finished grading: because people desire to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people desire to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people desire to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because peipole want to help $$ google api
ANALYZER :::: Teacher parts: peipole
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
### LEVENSHTEIN SUCSESS!
### teacher: Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
### student: Answer: because peipole want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people wanting to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: wanting
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because people wanting to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[people - people, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[people - people, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want wanting
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> wanting
equalSentences1 :::: One path check, Set contains already: wanting
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, to - to, wanting - want]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, people - people, to - to, wanting - want]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[help - help, people - people, to - to, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> wanting
equalSentences1 :::: One path check, Set contains already: wanting
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, people - people, to - to, wanting - want]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[help - help, people - people, to - to, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because people wanting to help
equalSentences1 :::: equalset = : [help - help, people - people, to - to, wanting - want]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[people - people, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> wanting
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[people - people, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want wanting
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, to - to, wanting - want]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, people - people, to - to, wanting - want]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[help - help, people - people, to - to, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> help
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, people - people, to - to, wanting - want]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[help - help, people - people, to - to, wanting - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people wanting to help because people want to help
equalSentences1 :::: equalset = : [help - help, people - people, to - to, wanting - want]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because people wanting to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: because people wanting to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: because people wanting to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, people - people, to - to, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people, to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[want - want, people - people, to - to, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people, to - to, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help people want to help
equalSentences1 :::: equalset = : [want - want, people - people, to - to, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: people want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
### WORDS ANALYZER RESULT:
### student: Answer: people want to help, Wrriten by: STUDENT, Grade: 100, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they want to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> they
compare :::: special case1 V people + they
equalNodes :::: equal tokens: people + they
[they - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[they - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[to - to, they - people, want - want]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, they - people, want - want, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, they - people, want - want, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[to - to, they - people, want - want, help - help]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[to - to, they - people, want - want, help - help]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help they want to help
equalSentences1 :::: equalset = : [to - to, they - people, want - want, help - help]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: they want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: they want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
### WORDS ANALYZER RESULT:
### student: Answer: they want to help, Wrriten by: STUDENT, Grade: 100, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because the people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: because the people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking want >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking want >> COMPARE TO >> want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want want
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[people - people, want - want, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, want - want, help - help, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want, help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: we have insignificant word: because
equalSentences :::: we have insignificant word: the
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalSentences1 :::: One path check, Set contains already: want
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[people - people, want - want, help - help, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[people - people, want - want, help - help, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help because the people want to help
equalSentences1 :::: equalset = : [people - people, want - want, help - help, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: because the people want to help
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: because the people want to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
### WORDS ANALYZER RESULT:
### student: Answer: because the people want to help, Wrriten by: STUDENT, Grade: 100, Significant Words: 4, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$ because people want to help $$ google api
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ thats because people want to help people $$ google api
ANALYZER :::: Teacher parts: thats
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: people
ANALYZER :::: Teacher parts: NOUN
getGrade :::: TEACHER :Answer: because people want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: thats because people want to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> thats
equalNodes :::: trick loop var: thats +to tricked>>: because
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: trick loop var: thats +to tricked>>: want
equalNodes :::: trick try var: thats +to tricked>>: want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
equalNodes :::: not equal tokens: people + people
equalNodes :::: not equal tokens: people + help
equalNodes :::: trick loop var: want +to tricked>>: people
equalNodes :::: not equal tokens: people + want
equalNodes :::: trick loop var: thats +to tricked>>: to
equalNodes :::: trick loop var: thats +to tricked>>: help
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: not equal tokens: people + thats
equalSentences1 :::: One path check, NOT equal: people thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking people >> COMPARE TO >> people
compare :::: passed checkTokens V people + people
compare :::: passed checkParts V people + people
compare :::: passed checkRelationToParent V people + people
equalNodes :::: equal tokens: people + people
[people - people]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: people people
equalSentences :::: checking want >> COMPARE TO >> thats
equalNodes :::: trick loop var: thats +to tricked>>: because
equalNodes :::: trick loop var: thats +to tricked>>: people
equalNodes :::: trick loop var: thats +to tricked>>: want
equalNodes :::: trick try var: thats +to tricked>>: want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[want - want, people - people]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want thats
equalSentences :::: checking to >> COMPARE TO >> thats
equalSentences1 :::: One path check, Set contains already: thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking to >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking to >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: trick loop var: help +to tricked>>: people
equalNodes :::: trick try var: help +to tricked>>: people
equalNodes :::: not equal tokens: to + people
equalNodes :::: not equal tokens: to + help
equalNodes :::: trick loop var: want +to tricked>>: people
equalNodes :::: not equal tokens: to + want
equalSentences1 :::: One path check, NOT equal: to want
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[want - want, people - people, to - to]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> thats
equalSentences1 :::: One path check, Set contains already: thats
equalSentences :::: we have insignificant word: because
equalSentences :::: checking help >> COMPARE TO >> people
equalSentences1 :::: One path check, Set contains already: people
equalSentences :::: checking help >> COMPARE TO >> want
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[help - help, want - want, people - people, to - to]
equalNodes :::: there are fathers: want + want
compare :::: passed checkTokens V want + want
compare :::: passed checkParts V want + want
compare :::: passed checkRelationToParent V want + want
equalNodes :::: equal tokens: want + want
[help - help, want - want, people - people, to - to]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help want
equalSentences1 :::: finished path check WITH FOUND=TRUE: because people want to help thats because people want to help people
equalSentences1 :::: equalset = : [help - help, want - want, people - people, to - to]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
finished grading: thats because people want to help people
grade: 100
### SYNTAX ANALYZER RESULT:
### student: Answer: thats because people want to help people, Wrriten by: STUDENT, Grade: -2, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
### WORDS ANALYZER RESULT:
### student: Answer: thats because people want to help people, Wrriten by: STUDENT, Grade: 100, Significant Words: 6, Teacher verified: false, syntaxable: false, aid: null
### grade: 100
