$$$$$$$$$$$$$$$$$$$$$$$$$$$ they want to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: want
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
$$$$$$$$$$$$$$$$$$$$$$$$$$$ they are wanting to help $$ google api
ANALYZER :::: Teacher parts: they
ANALYZER :::: Teacher parts: PRON
ANALYZER :::: Teacher parts: are
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: wanting
ANALYZER :::: Teacher parts: VERB
ANALYZER :::: Teacher parts: to
ANALYZER :::: Teacher parts: PRT
ANALYZER :::: Teacher parts: help
ANALYZER :::: Teacher parts: VERB
getGrade :::: TEACHER :Answer: they want to help, Wrriten by: TEACHER, Grade: 100, Significant Words: 4, Teacher verified: true, syntaxable: true, aid: null
getGrade :::: STUDENT :Answer: they are wanting to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
ANALYZER :::: COMPARING STUDENT TO TEACHER
equalSentences :::: checking they >> COMPARE TO >> they
compare :::: passed checkTokens V they + they
compare :::: passed checkParts V they + they
compare :::: passed checkRelationToParent V they + they
equalNodes :::: equal tokens: they + they
[they - they]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[wanting - want, they - they]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: they they
equalSentences :::: checking want >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: wanting
equalNodes :::: trick loop var: are +to tricked>>: to
equalNodes :::: trick loop var: are +to tricked>>: help
equalNodes :::: not equal tokens: want + are
equalSentences1 :::: One path check, NOT equal: want are
equalSentences :::: checking want >> COMPARE TO >> wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[wanting - want, they - they]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: want wanting
equalSentences :::: checking to >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking to >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: wanting
equalNodes :::: trick loop var: are +to tricked>>: to
equalNodes :::: trick loop var: are +to tricked>>: help
equalNodes :::: not equal tokens: to + are
equalSentences1 :::: One path check, NOT equal: to are
equalSentences :::: checking to >> COMPARE TO >> wanting
equalSentences1 :::: One path check, Set contains already: wanting
equalSentences :::: checking to >> COMPARE TO >> to
compare :::: passed checkTokens V to + to
compare :::: passed checkParts V to + to
compare :::: passed checkRelationToParent V to + to
equalNodes :::: equal tokens: to + to
[wanting - want, to - to, they - they]
equalNodes :::: there are fathers: help + help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[wanting - want, to - to, help - help, they - they]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[wanting - want, to - to, help - help, they - they]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: to to
equalSentences :::: checking help >> COMPARE TO >> they
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking help >> COMPARE TO >> are
equalNodes :::: trick loop var: are +to tricked>>: wanting
equalNodes :::: trick loop var: are +to tricked>>: to
equalNodes :::: trick loop var: are +to tricked>>: help
equalNodes :::: not equal tokens: help + are
equalSentences1 :::: One path check, NOT equal: help are
equalSentences :::: checking help >> COMPARE TO >> wanting
equalSentences1 :::: One path check, Set contains already: wanting
equalSentences :::: checking help >> COMPARE TO >> to
equalSentences1 :::: One path check, Set contains already: to
equalSentences :::: checking help >> COMPARE TO >> help
compare :::: passed checkTokens V help + help
compare :::: passed checkParts V help + help
compare :::: passed checkRelationToParent V help + help
equalNodes :::: equal tokens: help + help
[wanting - want, to - to, help - help, they - they]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[wanting - want, to - to, help - help, they - they]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: help help
equalSentences1 :::: finished path check WITH FOUND=TRUE: they want to help they are wanting to help
equalSentences1 :::: equalset = : [wanting - want, to - to, help - help, they - they]
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: teacher_ans.getAnswerWords(): 4
equalSentences1 :::: equalSet.size(): 4
ANALYZER :::: COMPARING TEACHER TO STUDENT
equalSentences :::: checking they >> COMPARE TO >> they
compare :::: passed checkTokens V they + they
compare :::: passed checkParts V they + they
compare :::: passed checkRelationToParent V they + they
equalNodes :::: equal tokens: they + they
[they - they]
equalNodes :::: there are fathers: want + wanting
compare :::: passed checkTokens V want + wanting
compare :::: passed checkParts V want + wanting
compare :::: passed checkRelationToParent V want + wanting
equalNodes :::: equal tokens: want + wanting
[wanting - want, they - they]
equalNodes :::: no father... returning true. bye
equalSentences1 :::: finished path check, equal: they they
equalSentences :::: checking they >> COMPARE TO >> are
equalSentences1 :::: One path check, Set contains already: they
equalSentences :::: checking want >> COMPARE TO >> are
equalNodes :::: trick loop var: want +to tricked>>: to
equalNodes :::: trick loop var: want +to tricked>>: help
equalNodes :::: trick try var: want +to tricked>>: help
equalNodes :::: not equal tokens: help + are
equalNodes :::: not equal tokens: want + are
equalSentences1 :::: One path check, NOT equal: want are
equalSentences :::: checking to >> COMPARE TO >> are
equalNodes :::: trick loop var: to +to tricked>>: help
equalNodes :::: not equal tokens: to + are
equalSentences1 :::: One path check, NOT equal: to are
equalSentences :::: checking help >> COMPARE TO >> are
equalNodes :::: not equal tokens: help + are
equalSentences1 :::: One path check, NOT equal: help are
equalSentences1 :::: finished path check WITH FOUND=FALSE! for constant word: are
equalSentences1 :::: finishedGrade: 0
equalSentences1 :::: grade: 0
finished grading: they are wanting to help
grade: 95
### SYNTAX ANALYZER RESULT:
### student: Answer: they are wanting to help, Wrriten by: STUDENT, Grade: -2, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
### WORDS ANALYZER RESULT:
### student: Answer: they are wanting to help, Wrriten by: STUDENT, Grade: 95, Significant Words: 5, Teacher verified: false, syntaxable: false, aid: null
### grade: 95
